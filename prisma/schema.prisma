// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model userEntity {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  isActive  Boolean  @default(true)
  rol     String   @default("user")
  password  String
  createdAt  DateTime @default(now())
}


model Representante{
	id        Int      @id @default(autoincrement())
	madre      String
	cedulaM     String  
	telefonoM String
	emailM String
	profesionM String
	viveConEstuanteM Boolean

	padre      String
	cedulaP     String  
	telefonoP String
	emailP String
	profesionP String
	viveConEstuanteP Boolean

	numEmergencia String
	parentesco String // de la persona a llamar

	nombreRepresentante String //que la inscribe
	estudiante EstudianteEntity[]
	createdAt  DateTime @default(now())
}
 

model Academico {
  id        Int      @id @default(autoincrement())
  fechaEscolarDesde DateTime
  fechaEscolarHasta DateTime
  plantelOrigen String 
  repitiente Boolean @default(false)
  asignacionCursa String 
  asignacionPendiente String 
  pruebaVocacional Boolean
  tipoEstudiante String

  curso   Curso? @relation(fields: [cursoId], references: [id])
  cursoId Int @unique

  estudiante      EstudianteEntity? @relation(fields: [id_estudiante], references: [id])
  id_estudiante   Int
  createdAt  DateTime @default(now())
}

model Retiro{
	id        Int      @id @default(autoincrement())
	representante String     //nombre
	motivo String
	responsable String
	cedulaResponsable String 
	cargoResponsable String
	estudiante      EstudianteEntity? @relation(fields: [id_estudiante], references: [id])
  id_estudiante   Int @unique
	createdAt  DateTime @default(now())
}

model PerfilEstudiante{
	  id        Int      @id @default(autoincrement())
	  name      String
	  email     String   @unique
	  isActive  Boolean  @default(true)
	  cedula     String  
	  cedulaEscolar     String  
    origen 	String
	  direcion String
	  telefono String
	  medicina Boolean @default(false)
	  alergia Boolean  @default(false)
	  estudiante EstudianteEntity?
	  createdAt  DateTime @default(now())
}


model Curso{
	id        Int      @id @default(autoincrement())
	nombre String
	Academico   Academico?
  asignatura Asignatura[]
}

model Asignatura{
    id        Int      @id @default(autoincrement())
    name String
    profesor String 
    curso   Curso? @relation(fields: [cursoId], references: [id])
    cursoId Int
	  notas Notas[]
}

model Notas {         
    id        Int      @id @default(autoincrement())
	  valor Float
	  asignatura   Asignatura? @relation(fields: [asignaturaId], references: [id])
    asignaturaId Int
}


model EstudianteEntity {
  id        Int      @id @default(autoincrement())
  
  id_perfil   Int @unique
  perfil      PerfilEstudiante? @relation(fields: [id_perfil], references: [id])
  
   
  representante      Representante? @relation(fields: [id_representante], references: [id])
  id_representante   Int @unique
  
  recordAcademico Academico[]
  
  retiro      Retiro? 

  createdAt  DateTime @default(now())
}


